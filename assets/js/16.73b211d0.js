(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{381:function(e,t,s){"use strict";s.r(t);var a=s(42),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[e._v("#")]),e._v(" Types")]),e._v(" "),s("p",[e._v("Herodot employs a generic, and recursive, type parser. It understands the type of all parameters in your API and can infer metadata from them.")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TL;DR:")]),e._v(" Herodot understands types exactly the way you're used to writing them. Whenever a type is required (such as with parameters or responses), you can\nuse primitives, generics, models or unions.")])]),e._v(" "),s("h2",{attrs:{id:"primitive-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#primitive-types"}},[e._v("#")]),e._v(" Primitive types")]),e._v(" "),s("p",[e._v("Herodot has support for the following primitive types, which largely resembles PHP's primitives:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("boolean")])]),e._v(" "),s("li",[s("strong",[e._v("float")])]),e._v(" "),s("li",[s("strong",[e._v("integer")])]),e._v(" "),s("li",[s("strong",[e._v("null")])]),e._v(" "),s("li",[s("strong",[e._v("string")])]),e._v(" "),s("li",[s("strong",[e._v("array")])])]),e._v(" "),s("p",[e._v("Additionally, there's the special "),s("code",[e._v("any")]),e._v(" type, which can be used in all places where a type isn't known or cannot be expressed as a "),s("a",{attrs:{href:"#union-types"}},[e._v("union type")]),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"union-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#union-types"}},[e._v("#")]),e._v(" Union types")]),e._v(" "),s("p",[e._v("Herodot supports union types, that is, types composed out of one or more types. You can declare a union by joining two or more types with a pipe ("),s("code",[e._v("|")]),e._v("):")]),e._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[e._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("integer\n")])])]),s("h2",{attrs:{id:"template-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#template-types"}},[e._v("#")]),e._v(" Template types")]),e._v(" "),s("p",[e._v("Template types, or generics, are a kind of container for other types: Say, an array of numbers. It could be typed as "),s("code",[e._v("array")]),e._v(", but that would omit the additional\ninformation about the array content. Therefore, Herodot allows you to add that information to the type:")]),e._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("array")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("integer"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),s("p",[e._v("As that is pretty verbose, you can also write simple array types like the following:")]),e._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[e._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("p",[e._v("Template types also support union types:")]),e._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("array")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("integer"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("float"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),s("p",[e._v("Herodot parses those types "),s("em",[e._v("recursively")]),e._v(", meaning you may nest the type syntax as much as you like:")]),e._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("array")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("array")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("float"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),s("h2",{attrs:{id:"model-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#model-types"}},[e._v("#")]),e._v(" Model types")]),e._v(" "),s("p",[e._v("Herodot also supports "),s("em",[e._v("model types")]),e._v(", so you may use your model (or API resource) classes as types when annotating API responses, for example.")])])}),[],!1,null,null,null);t.default=r.exports}}]);