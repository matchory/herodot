{"version":3,"sources":["webpack:///./ts/modules/theme-toggle.ts","webpack:///./ts/index.ts"],"names":["autoTheme","darkTheme","lightTheme","applyTheme","element","mediaQuery","getTheme","classList","add","remove","matches","localStorage","setTheme","theme","setItem","removeItem","window","document","addEventListener","global","prefersDarkScheme","matchMedia","themeToggle","querySelector","documentElement","cycleTheme","isMacOs","test","navigator","platform","searchForm","metaKey","ctrlKey","focus","blur","setupSearch"],"mappings":"mBAAO,IAAMA,EAAa,OACbC,EAAa,OACbC,EAAa,QAQnB,SAASC,EACZC,EACAC,GAIA,OAFcC,KAKV,KAAKL,EACDG,EAAQG,UAAUC,IAAKP,GACvBG,EAAQG,UAAUE,OAAQP,EAAYF,GAEtC,MAGJ,KAAKE,EACDE,EAAQG,UAAUC,IAAKN,GACvBE,EAAQG,UAAUE,OAAQR,EAAWD,GACrC,MAGJ,QACSK,EAAWK,SACZN,EAAQG,UAAUE,OAAQP,GAC1BE,EAAQG,UAAUC,IAAKP,EAAWD,KAElCI,EAAQG,UAAUE,OAAQR,GAC1BG,EAAQG,UAAUC,IAAKN,EAAYF,KAQ5C,SAASM,IAGZ,OAFkBK,aAAY,OAEd,KAQb,SAASC,EAAUC,GACtB,OAASA,GACL,KAAKZ,EACL,KAAKC,EACDS,aAAaG,QAAS,QAASD,GAC/B,MAEJ,QACIF,aAAaI,WAAY,UC9DrCC,OAAOC,SAASC,iBACZ,oBACA,WAAM,OAQKC,EARCH,OAaFI,EAAoBD,EAAOE,WAC7B,gCAGEC,EAAcH,EAAOF,SAASM,cAChC,uBAIJH,EAAkBF,iBACd,UACA,WAAY,OAAAf,EACRgB,EAAOF,SAASO,gBAChBJ,MAKHE,GACDA,EAAYJ,iBAAkB,SAAS,YDmC5C,WAGH,OAFcZ,KAGV,KAAKL,EACD,OAAOW,EAAUV,GAErB,KAAKA,EACD,OAAOU,EAAU,MAErB,QACWA,EAAUX,IC7CbwB,GACAtB,EACIgB,EAAOF,SAASO,gBAChBJ,WAMhB,WACI,IAAMM,EAAU,0BAA0BC,KACtCR,EAAOS,UAAUC,UAGhBH,GACDP,EAAOF,SAASO,gBAAgBjB,UAAUC,IAAK,SAGnD,IAAMsB,EAAsCb,SAASM,cACjD,sBAGEO,IAKNX,EAAOD,iBACH,WACA,SAAE,G,IACIa,EAAO,UACPC,EAAO,UAEJ,MAAQ,MADR,QAEHN,GAAWK,IACVL,GAAWM,QAEKF,EAafG,QAZG,QAIfH,EAAWZ,iBACP,WACA,SAAE,GAAa,MAAQ,WAAhB,WACuBY,EAStBI,OARS,SArEzBC,GAFJ,IAAehB,EAKDC,EAIAE,M","file":"bundle.min.js","sourcesContent":["export const autoTheme  = 'auto';\nexport const darkTheme  = 'dark';\nexport const lightTheme = 'light';\n\n/**\n * Applies the currently active theme to the given element.\n *\n * @param element       Element to apply the theme to.\n * @param mediaQuery    Media Query to check if no theme is active.\n */\nexport function applyTheme(\n    element: HTMLElement,\n    mediaQuery: MediaQueryList,\n): void {\n    const theme = getTheme();\n\n    switch ( theme ) {\n\n        // Dark theme is active: Make it explicit.\n        case darkTheme:\n            element.classList.add( darkTheme );\n            element.classList.remove( lightTheme, autoTheme );\n\n            break;\n\n        // Light theme is active: Make it explicit.\n        case lightTheme:\n            element.classList.add( lightTheme );\n            element.classList.remove( darkTheme, autoTheme );\n            break;\n\n        // No theme is active: Let the media query decide.\n        default:\n            if ( mediaQuery.matches ) {\n                element.classList.remove( lightTheme );\n                element.classList.add( darkTheme, autoTheme );\n            } else {\n                element.classList.remove( darkTheme );\n                element.classList.add( lightTheme, autoTheme );\n            }\n    }\n}\n\n/**\n * Reads the theme from the storage.\n */\nexport function getTheme(): string | null {\n    const { theme } = localStorage;\n\n    return theme || null;\n}\n\n/**\n * Sets the theme to the storage.\n *\n * @param theme\n */\nexport function setTheme( theme: string | null ): void {\n    switch ( theme ) {\n        case darkTheme:\n        case lightTheme:\n            localStorage.setItem( 'theme', theme );\n            break;\n\n        default:\n            localStorage.removeItem( 'theme' );\n    }\n}\n\n/**\n * Cycles the theme depending on the current theme.\n */\nexport function cycleTheme(): void {\n    const theme = getTheme();\n\n    switch ( theme ) {\n        case darkTheme:\n            return setTheme( lightTheme );\n\n        case lightTheme:\n            return setTheme( null );\n\n        default:\n            return setTheme( darkTheme );\n    }\n}\n","import { applyTheme, cycleTheme } from '@/modules/theme-toggle';\nimport '../css/style.pcss';\n\nwindow.document.addEventListener(\n    'DOMContentLoaded',\n    () => init( window ),\n);\n\n/**\n * Initializes the page modules.\n *\n * @param global\n */\nfunction init( global: Window ): void {\n    setupTheming();\n    setupSearch();\n\n    function setupTheming(): void {\n        const prefersDarkScheme = global.matchMedia(\n            '(prefers-color-scheme: dark)',\n        );\n\n        const themeToggle = global.document.querySelector(\n            '[data-theme-toggle]',\n        );\n\n        // Apply the theme if the system color scheme preference changes\n        prefersDarkScheme.addEventListener(\n            'change',\n            (): void => applyTheme(\n                global.document.documentElement,\n                prefersDarkScheme,\n            ),\n        );\n\n        // Cycle, then apply the theme if the theme toggle is clicked\n        if ( themeToggle ) {\n            themeToggle.addEventListener( 'click', (): void => {\n                cycleTheme();\n                applyTheme(\n                    global.document.documentElement,\n                    prefersDarkScheme,\n                );\n            } );\n        }\n    }\n\n    function setupSearch(): void {\n        const isMacOs = /(Mac|iPhone|iPod|iPad)/i.test(\n            global.navigator.platform,\n        );\n\n        if ( isMacOs ) {\n            global.document.documentElement.classList.add( 'macos' );\n        }\n\n        const searchForm: HTMLInputElement | null = document.querySelector(\n            '[data-search-form]',\n        );\n\n        if ( !searchForm ) {\n            return;\n        }\n\n        // Open the search box on pressing CMD+K/CTRL+K\n        global.addEventListener(\n            'keydown',\n            ( {\n                  metaKey,\n                  ctrlKey,\n                  key,\n              } ) => key === 'k' && (\n                ( isMacOs && metaKey ) ||\n                ( !isMacOs && ctrlKey )\n            )\n                     ? openSearch( searchForm )\n                     : null,\n        );\n\n        // Close the search form on pressing Escape while it's focused\n        searchForm.addEventListener(\n            'keydown',\n            ( { key } ) => key === 'Escape'\n                           ? closeSearch( searchForm )\n                           : null,\n        );\n\n        function openSearch( element: HTMLInputElement ): void {\n            element.focus();\n        }\n\n        function closeSearch( element: HTMLInputElement ): void {\n            element.blur();\n        }\n    }\n}\n\n"],"sourceRoot":""}